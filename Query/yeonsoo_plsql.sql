-- 회원

-- ▼ 회원 INSERT 시 작동될 프로시저문
CREATE OR REPLACE PROCEDURE PRC_USER_INSERT
( V_USER_ID     IN USERS.USER_ID%TYPE
, V_USER_PW     IN USERS.USER_PW%TYPE
, V_USER_NAME   IN USERS.USER_NAME%TYPE
, V_USER_TEL    IN USERS.USER_TEL%TYPE
, V_USER_EMAIL  IN USERS.USER_EMAIL%TYPE
, V_GENDER_NUM  IN USERS.GENDER_NUM%TYPE
, V_USER_BIRTH  IN USERS.USER_BIRTH%TYPE
)
IS
    V_SIGN_NUM  USERS.SIGN_NUM%TYPE;
BEGIN
    
    -- SIGN_NUMBER 테이블에 INSERT
    INSERT INTO SIGN_NUMBER(SIGN_NUM) VALUES(SIGN_NUMBER_SEQ.NEXTVAL);
    
    -- V_SIGN_NUM에 등록번호 대입
    SELECT SIGN_NUMBER_SEQ.CURRVAL INTO V_SIGN_NUM
    FROM DUAL;
    
    -- USERS 테이블에 INSERT
    INSERT INTO USERS(USER_NUM, SIGN_NUM, USER_ID, USER_PW, USER_NAME, USER_TEL, USER_EMAIL, GENDER_NUM, USER_BIRTH)
    VALUES(USERS_SEQ.NEXTVAL, V_SIGN_NUM, V_USER_ID, CRYPTPACK.ENCRYPT(V_USER_PW, V_USER_PW), V_USER_NAME, V_USER_TEL, V_USER_EMAIL, V_GENDER_NUM, V_USER_BIRTH);
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;

END;


-- ▼ 회원과 성별명 함께 조회하는 뷰
CREATE OR REPLACE VIEW VIEW_USERS_GENDER
AS
SELECT U.USER_NAME AS USER_NAME, U.USER_ID AS USER_ID, NVL(U.USER_INTRO, '안녕하세요.') AS USER_INTRO, U.USER_EMAIL AS USER_EMAIL, U.USER_TEL AS USER_TEL
     , G.GENDER_NAME AS USER_GENDER, U.SIGN_NUM AS SIGN_NUM
FROM USERS U JOIN GENDER G
           ON U.GENDER_NUM = G.GENDER_NUM;
           
           
-- ▼ 지역명과 함께 관심 지역 정보 조회하는 뷰
CREATE OR REPLACE VIEW VIEW_FREIGON_SEARCH
AS
SELECT R.REGION_NAME AS FREGION_NAME, FR.SIGN_NUM AS SIGN_NUM
FROM FAVOR_REGION FR JOIN REGION R
                     ON FR.REGION_NUM = R.REGION_NUM;
                     

-- ▼ 카테고리명과 함께 관심 카테고리 정보 조회하는 뷰
CREATE OR REPLACE VIEW VIEW_FCATEGORY_SEARCH
AS
SELECT TC.TCATEGORY_NAME AS FCATEGORY_NAME, FC.SIGN_NUM AS SIGN_NUM
FROM FAVOR_CATEGORY FC JOIN TRAVEL_CATEGORY TC
     ON FC.TCATEGORY_NUM = TC.TCATEGORY_NUM;
                     

-- ▼ 회원 탈퇴 시 작동할 프로시저문
CREATE OR REPLACE PROCEDURE PRC_USER_QUIT
( V_SIGN_NUM    IN USERS.SIGN_NUM%TYPE
)
IS
    V_USER_ID   USERS.USER_ID%TYPE;
BEGIN
    
    -- 탈퇴 회원의 아이디를 V_USER_ID에 대입
    SELECT USER_ID INTO V_USER_ID
    FROM USERS
    WHERE SIGN_NUM = V_SIGN_NUM;
    
    -- QUIT_USER 테이블에 데이터 INSERT
    INSERT INTO QUIT_USER(QUIT_NUM, SIGN_NUM, QUIT_ID) VALUES(QUSER_SEQ.NEXTVAL, V_SIGN_NUM, V_USER_ID);
    
    -- USERS 테이블에서 데이터 DELETE
    DELETE FROM USERS WHERE SIGN_NUM LIKE V_SIGN_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;

END;


-- ▼ 경고 내역 조회하는 뷰
CREATE OR REPLACE VIEW VIEW_REPORTLIST
AS
-- 여행카드
SELECT 'card' AS TYPE
     , CR.CARD_NUM AS ARTICLE, C.SIGN_NUM AS WRITER
     , CR.CREPORT_NUM AS REPORT_NUM, CR.CREPORT_TITLE AS REPORT_TITLE, RR.RREASON_NAME AS REASON, CR.CREPORT_DATE AS REPORT_DATE, CR.SIGN_NUM AS REPORTER
     , NVL(CS.CSTATUS_NUM, 0) AS STATUS_NUM, CS.TYPE_NUM AS STATUS, CS.CSTATUS_DATE AS STATUS_DATE, CS.CSTATUS_CHECK AS STATUS_CHECK, CS.ADMIN_NUM AS STATUS_ADMIN
     , CWC.CCANCEL_NUM AS CANCEL_NUM, CWC.CCANCEL_DATE AS CANCEL_DATE, CWC.ADMIN_NUM AS CANCEL_ADMIN
FROM CARD_REPORT CR JOIN CREPORT_STATUS CS
                    ON CR.CREPORT_NUM = CS.CREPORT_NUM
                    JOIN REPORT_REASON RR
                    ON CR.RREASON_NUM = RR.RREASON_NUM
                    LEFT OUTER JOIN CWARNING_CANCEL CWC
                    ON CS.CSTATUS_NUM =CWC.CSTATUS_NUM
                    JOIN CARD C
                    ON CR.CARD_NUM = C.CARD_NUM

UNION ALL

-- 여행책
SELECT 'book' AS TYPE
     , BR.BOOK_NUM AS ARTICLE, B.SIGN_NUM AS WRITER
     , BR.BREPORT_NUM AS REPORT_NUM, BR.BREPORT_TITLE AS TITLE, RR.RREASON_NAME AS REASON, BR.BREPORT_DATE AS REPORT_DATE, BR.SIGN_NUM AS REPORTER
     , NVL(BS.BSTATUS_NUM, 0) AS STATUS_NUM, BS.TYPE_NUM AS STATUS, BS.BSTATUS_DATE AS STATUS_DATE, BS.BSTATUS_CHECK AS STATUS_CHECK, BS.ADMIN_NUM AS STATUS_ADMIN
     , BWC.BCANCEL_NUM AS CANCEL_NUM, BWC.BCANCEL_DATE AS CANCEL_DATE, BWC.ADMIN_NUM AS CANCEL_ADMIN
FROM BOOK_REPORT BR JOIN BREPORT_STATUS BS
                    ON BR.BREPORT_NUM = BS.BREPORT_NUM
                    JOIN REPORT_REASON RR
                    ON BR.RREASON_NUM = RR.RREASON_NUM
                    LEFT OUTER JOIN BWARNING_CANCEL BWC
                    ON BS.BSTATUS_NUM = BWC.BSTATUS_NUM
                    JOIN BOOK B
                    ON BR.BOOK_NUM = B.BOOK_NUM

UNION ALL

-- 댓글
SELECT 'comment' AS TYPE
     , CO.COMMENT_NUM AS ARTICLE, CO.SIGN_NUM AS WRITER
     , COR.COREPORT_NUM AS REPORT_NUM, COR.COREPORT_TITLE AS TITLE, RR.RREASON_NAME AS REASON, COR.COREPORT_DATE AS REPORT_DATE, COR.SIGN_NUM AS REPORTER
     , NVL(COS.COSTATUS_NUM, 0) AS STATUS_NUM, COS.TYPE_NUM AS STATUS, COS.COSTATUS_DATE AS STATUS_DATE, COS.COSTATUS_CHECK AS STATUS_CHECK, COS.ADMIN_NUM AS STATUS_ADMIN
     , COWC.COCANCEL_NUM AS CANCEL_NUM, COWC.COCANCEL_DATE AS CANCEL_DATE, COWC.ADMIN_NUM AS CANCEL_ADMIN
FROM COMMENT_REPORT COR LEFT OUTER JOIN COREPORT_STATUS COS
                        ON COR.COREPORT_NUM = COS.COREPORT_NUM
                        JOIN REPORT_REASON RR
                        ON COR.RREASON_NUM = RR.RREASON_NUM
                        LEFT OUTER JOIN COWARNING_CANCEL COWC
                        ON COS.COSTATUS_NUM = COWC.COSTATUS_NUM
                        JOIN COMMENTS CO
                        ON COR.COMMENT_NUM = CO.COMMENT_NUM;

                        
/* 정책 변경으로 삭제 : 신고처리 종류번호가 변경이 되면 사용자 경고 내역을 확인할 때 처리가 불가 (1번과 3번 구분)

-- 여행카드 경고 내역 취소할 때 작동하는 프로시저 (삭제)
CREATE OR REPLACE PROCEDURE PRC_CCANCEL_INSERT
( V_ADMIN_NUM       IN CWARNING_CANCEL.ADMIN_NUM%TYPE
, V_CSTATUS_NUM     IN CWARNING_CANCEL.CSTATUS_NUM%TYPE
, V_REASON_NUM      IN CWARNING_CANCEL.REASON_NUM%TYPE
, V_CCANCEL_MEMO    IN CWARNING_CANCEL.CCANCEL_MEMO%TYPE
)
IS
BEGIN
    
    -- CWARNING_CANCEL 테이블에 INSERT
    INSERT INTO CWARNING_CANCEL(CCANCEL_NUM, ADMIN_NUM, CSTATUS_NUM, REASON_NUM, CCANCEL_MEMO)
    VALUES(CWARNING_CANCEL_SEQ.NEXTVAL, V_ADMIN_NUM, V_CSTATUS_NUM, V_REASON_NUM, V_CCANCEL_MEMO);
    
    -- CREPORT_STATUS 테이블에 처리번호 4(소명)으로 UPDATE
    UPDATE CREPORT_STATUS
    SET TYPE_NUM = 4
    WHERE CSTATUS_NUM = V_CSTATUS_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
    
    COMMIT;

END;


-- 여행책 경고 내역 취소할 때 작동하는 프로시저 (삭제)
CREATE OR REPLACE PROCEDURE PRC_BCANCEL_INSERT
( V_ADMIN_NUM       IN BWARNING_CANCEL.ADMIN_NUM%TYPE
, V_BSTATUS_NUM     IN BWARNING_CANCEL.BSTATUS_NUM%TYPE
, V_REASON_NUM      IN BWARNING_CANCEL.REASON_NUM%TYPE
, V_BCANCEL_MEMO    IN BWARNING_CANCEL.BCANCEL_MEMO%TYPE
)
IS
BEGIN
    
    -- BWARNING_CANCEL 테이블에 INSERT
    INSERT INTO BWARNING_CANCEL(BCANCEL_NUM, ADMIN_NUM, BSTATUS_NUM, REASON_NUM, BCANCEL_MEMO)
    VALUES(BWARNING_CANCEL_SEQ.NEXTVAL, V_ADMIN_NUM, V_BSTATUS_NUM, V_REASON_NUM, V_BCANCEL_MEMO);
    
    -- BREPORT_STATUS 테이블에 처리번호 4(소명)으로 UPDATE
    UPDATE BREPORT_STATUS
    SET TYPE_NUM = 4
    WHERE BSTATUS_NUM = V_BSTATUS_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;

END;


-- 여행책 경고 내역 취소할 때 작동하는 프로시저 (삭제)
CREATE OR REPLACE PROCEDURE PRC_COCANCEL_INSERT
( V_ADMIN_NUM       IN COWARNING_CANCEL.ADMIN_NUM%TYPE
, V_COSTATUS_NUM    IN COWARNING_CANCEL.COSTATUS_NUM%TYPE
, V_REASON_NUM      IN COWARNING_CANCEL.REASON_NUM%TYPE
, V_COCANCEL_MEMO   IN COWARNING_CANCEL.COCANCEL_MEMO%TYPE
)
IS
BEGIN
    
    -- COWARNING_CANCEL 테이블에 INSERT
    INSERT INTO COWARNING_CANCEL(COCANCEL_NUM, ADMIN_NUM, COSTATUS_NUM, REASON_NUM, COCANCEL_MEMO)
    VALUES(COWARNING_CANCEL_SEQ.NEXTVAL, V_ADMIN_NUM, V_COSTATUS_NUM, V_REASON_NUM, V_COCANCEL_MEMO);
    
    -- COREPORT_STATUS 테이블에 처리번호 4(소명)으로 UPDATE
    UPDATE COREPORT_STATUS
    SET TYPE_NUM = 4
    WHERE COSTATUS_NUM = V_COSTATUS_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;

END;

*/


-- ▼ 질문 테이블과 답변 테이블을 함께 조회하기 위한 뷰
CREATE OR REPLACE VIEW VIEW_QNA
AS
SELECT Q.QUESTION_NUM AS QUESTION_NUM, QC.QCATEGORY_NUM AS QCATEGORY_NUM, QC.QCATEGORY_CLASS AS QCATEGORY_CLASS, Q.QUESTION_TITLE AS QUESTION_TITLE, Q.SIGN_NUM AS SIGN_NUM, Q.QUESTION_DATE AS QUESTION_DATE
     , NVL(A.ANSWER_NUM, 0) AS ANSWER_NUM, A.ANSWER_DATE AS ANSWER_DATE, A.ANSWER_CHECK AS ANSWER_CHECK
FROM ANSWER A  RIGHT JOIN QUESTION Q
               ON A.QUESTION_NUM = Q.QUESTION_NUM
               LEFT JOIN QUESTION_CATEGORY QC
               ON Q.QCATEGORY_NUM = QC.QCATEGORY_NUM;


-- ▼ 여행노트에 속한 여행카드 중 경고 당한 내역이 없는 카드 조회하는 뷰
CREATE OR REPLACE VIEW VIEW_CARDWARNING
AS
SELECT NC.NCARD_NUM AS NCARD_NUM, NC.NOTE_NUM AS NOTE_NUM, NC.CARD_NUM AS CARD_NUM, NVL(V.STATUS_DATE, SYSDATE) AS STATUS_DATE
FROM NOTED_CARD NC LEFT OUTER JOIN VIEW_REPORTLIST V
                   ON NC.CARD_NUM = V.ARTICLE
                   AND V.TYPE = 'card'
WHERE V.REPORT_NUM IS NULL
   OR V.STATUS = 2
   OR V.CANCEL_NUM IS NOT NULL;


-- ▼ 여행노트를 삭제할 때 포함된 여행카드까지 모두 삭제하는 프로시저
--    신고 당한 적이 없는 여행카드만 삭제되어야 함?
--    일단은 경고 내역이 없는 상태의 카드만 삭제되도록 작성
/*
CREATE OR REPLACE PROCEDURE PRC_NOTE_DELETE
( V_NOTE_NUM    IN NOTE.NOTE_NUM%TYPE
)
IS
    -- 커서에서 튀어나온 값을 담을 변수
    V_CARD_NUM  CARD.CARD_NUM%TYPE;
    
    -- 경고된 사실이 없는 여행카드 번호를 찾아줄 커서
    CURSOR CUR_CARDNUM_SELECT
    IS
    SELECT CARD_NUM
    FROM NOTED_CARD NC
    WHERE EXISTS ( SELECT 1
                   FROM VIEW_CARDWARNING V
                   WHERE NC.CARD_NUM = V.CARD_NUM
                     AND V.STATUS_DATE > (SYSDATE-365) )
          AND NC.NOTE_NUM = V_NOTE_NUM;
    
BEGIN
    
    DBMS_OUTPUT.PUT_LINE('에러');
    
    -- NOTED_CARD(자식 테이블)에서 데이터 삭제
    DELETE
    FROM NOTED_CARD
    WHERE NOTE_NUM = V_NOTE_NUM;
    
    
    -- 커서 오픈
    OPEN CUR_CARDNUM_SELECT;
    
    LOOP
        
        -- 커서에서 튀어나온 값 변수에 담기
        FETCH CUR_CARDNUM_SELECT INTO V_CARD_NUM;
        
        -- 더 이상 처리할 커서값이 없으면 LOOP 빠져나가기
        EXIT WHEN CUR_CARDNUM_SELECT%NOTFOUND;
        
        -- CARD(부모 테이블1)에서 데이터 삭제
        DELETE
        FROM CARD
        WHERE CARD_NUM = V_CARD_NUM;
    
    END LOOP;
    
    -- 커서 클로즈
    CLOSE CUR_CARDNUM_SELECT;
    
    -- NOTE(부모 테이블2)에서 데이터 삭제
    DELETE
    FROM NOTE
    WHERE NOTE_NUM = V_NOTE_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;

END;
테이블 구조 변경하면서 폐기 */
CREATE OR REPLACE PROCEDURE PRC_NOTE_DELETE
( V_NOTE_NUM    IN NOTE.NOTE_NUM%TYPE
)
IS
BEGIN
    
    -- NOTED_CARD(바인딩) 테이블에서 삭제
    DELETE
    FROM NOTED_CARD
    WHERE NOTE_NUM = V_NOTE_NUM;
    
    -- NOTE 테이블에서 삭제
    DELETE
    FROM NOTE
    WHERE NOTE_NUM = V_NOTE_NUM;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;

END;

-- 논의해야 할 부분:
-- 여행노트가 삭제 됐을 때 경고 당한 카드는 경고 내역 유지를 위해 남는다!
-- 거기까지는 OK
-- 하지만 만약 이후 소명을 통해 카드의 경고 내역이 해제된다면?
-- 해당 카드는 노트에 속하지 않았기 때문에 작성자 본인은 확인할 수 없지만
-- 다른 이용자는 프로필에서 확인 가능한 상태가 된다!!
-- ▲ 이거 어떻게 할지 (여행노트에 속한 여행카드 테이블에 없으면 리스트에 안 뿌리는 방법도 있을 듯.. 뷰 필요할지도...)

-- 논의해야 할 부분:
-- 여행카드, 여행책, 댓글 전부 신고된 적 있으면 삭제할 수 없는 상태...


-- ▼ 여행노트에 포함된 여행카드를 조회하기 위한 뷰 (당장 안 필요함)
/*
CREATE OR REPLACE VIEW VIEW_NOTED_CARD_SEARCH
AS
SELECT NC.NOTE_NUM AS NOTE_NUM
     , C.CARD_LAT AS LAT, C.CARD_LNG AS LNG, C.CARD_ZIPCODE AS ZIPCODE, C.CARD_ADDRESS AS ADDRESS, C.CARD_SADDRESS AS SADDRESS, C.CARD_LOCATION AS LOCATION
     , NVL(C.CARD_BUDGET, 0) AS BUDGET, NVL(C.CARD_COMMENT, '') AS CARD_COMMENT, NVL(C.CARD_IMG1, '') AS IMG1, NVL(C.CARD_IMG2, '') AS IMG2, NVL(C.CARD_IMG3, '') AS IMG3
     , C.CARD_VISITDATE AS VISITDATE, C.CARD_TIME AS TIME
FROM NOTED_CARD NC JOIN CARD C
                                                ON NC.CARD_NUM = C.CARD_NUM;
*/
                   

-- ▼ 여행카드 삭제 시, 생성일 유무 확인 후 삭제해주는 프로시저
CREATE OR REPLACE PROCEDURE PRC_CARD_DELETE
( V_CARD_NUM    IN CARD.CARD_NUM%TYPE
)
IS
    -- V_DATE_COUNT    NUMBER;
    V_CARD_DATE CARD.CARD_DATE%TYPE;
    
BEGIN

    -- NOTED_CARD 테이블에서 해당 데이터 삭제
    DELETE
    FROM NOTED_CARD
    WHERE CARD_NUM = CARD_NUM;
    
    -- PAY 테이블에서 해당 데이터 삭제
    DELETE
    FROM PAY
    WHERE CARD_NUM = CARD_NUM;
    
    -- 생성일 변수에 담기
    -- SELECT COUNT(CARD_DATE) INTO V_DATE_COUNT
    SELECT CARD_DATE INTO V_CARD_DATE
    FROM CARD
    WHERE CARD_NUM = V_CARD_NUM;
    
    -- 생성일이 NULL 값이면 삭제 / 생성일이 NOT NULL이면 바인딩만 삭제
    -- IF V_DATE_COUNT = 0
    IF V_CARD_DATE IS NULL
        THEN DELETE
             FROM CARD
             WHERE CARD_NUM = V_CARD_NUM;
    END IF;
    
    EXCEPTION
        WHEN OTHERS THEN ROLLBACK;
        
    COMMIT;
        
END;

